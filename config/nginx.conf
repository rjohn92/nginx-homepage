worker_processes auto;

events {
    worker_connections 1024;
}

http {
    limit_req_zone $binary_remote_addr zone=authzone:10m rate=10r/m;

    include /etc/nginx/mime.types;  # Include MIME types
    default_type application/octet-stream;


    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Common settings
    sendfile on;
    keepalive_timeout 65;

    # Include reusable snippets (e.g., proxy headers, error handling)
    include /etc/nginx/config/snippets/*.conf;

    # Use Docker's internal DNS resolver
    resolver 127.0.0.11 valid=30s;
    resolver_timeout 5s;

    # HTTP Redirect to HTTPS
    server {
        listen 80;
        listen [::]:80;
        server_name arjayserver.duckdns.org;

        set $oauth2_upstream http://oauth2-proxy:4180;


        location /.well-known/acme-challenge/ {
            root /usr/share/nginx/html;
        }

        location / {
            return 301 https://$host$request_uri;
        }
        
    }

    # HTTPS Server Block
    server {



        listen 443 ssl;
        listen [::]:443 ssl;
        http2 on;
        server_name arjayserver.duckdns.org;

        # SSL Configuration
        ssl_certificate /etc/letsencrypt/live/arjayserver.duckdns.org/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/arjayserver.duckdns.org/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384';
        ssl_prefer_server_ciphers off;
        
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # OCSP Stapling (Speed Up SSL Handshake)
        ssl_stapling on;
        ssl_stapling_verify on;


        # Security Headers
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options nosniff;
        add_header Referrer-Policy "no-referrer-when-downgrade";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";



# inside the same server { } block
location @oauth2_redirect {
    # redirect the client to oauth2-proxy start endpoint. $request_uri is already percent-encoded.
    return 302 https://$host/oauth2/start?rd=$scheme://$host$request_uri;
}




    # include /etc/nginx/config/authentication/*.conf;



    # Serve app or content with enforced auth
    location / {
        auth_request /oauth2/auth;
        error_page 401 = @oauth2_redirect;

        # Optional: map user into headers for backend
        auth_request_set $user $upstream_http_x_auth_request_user;
        add_header X-Authenticated-User $user;

        include /etc/nginx/config/snippets/proxy-headers.conf;

        # Serve your homepage
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ /index.html;
    }


        # Error Pages
        location = /error-404.html { root /usr/share/nginx/html/errors; 
        internal; 
        }
        location = /error-500.html { root /usr/share/nginx/html/errors; 
        internal; 
        }
        location = /error-502.html { root /usr/share/nginx/html/errors; 
        internal; 
        }
        location = /error-503.html { root /usr/share/nginx/html/errors; 
        internal; 
        }
        location = /error-504.html { root /usr/share/nginx/html/errors; 
        internal; 
        }

        # Static Files
        location /styles.css { root /usr/share/nginx/html; 
        }
        location /static/ { root /usr/share/nginx/html; 
        }



        # Include location blocks for Pi-hole, Plex, Network Map, etc.
        include /etc/nginx/config/locations/*.conf;

    }
}


